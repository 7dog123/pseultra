/*
 * pseultra/n64/boot/src/boot.sx
 * Bootcode
 * 
 * (C) pseudophpt, Nabile Rahmani 2018
 */

// N64 Definitions
#include <n64.sx>
#include <mips.sx>

// Code begins at 0x40
.org 0x40

// First stage in RSP DMEM
Stage1Start:

// Initialize COP0 registers
mtc0 $zero, Cause // Clear interrupt cause
mtc0 $zero, Count // Clear cycle count
mtc0 $zero, Compare // Clear cycle timer compare

// DMA boot segment to 0x1000
li $t4, N64_KSEG1_ADDR(N64_CART_DOM1_ADDR2)
lw $t3, 0x10($t4) // Start of boot segment in ROM
lw $t2, 0x14($t4) // Length of boot segment
addiu $t2, -1

li $t1, N64_KSEG1_ADDR(N64_PI_DRAM_ADDR_REG)
li $t0, 0x1000
sw $t0, 0($t1) // Load at 0x1000

li $t1, N64_KSEG1_ADDR(N64_PI_CART_ADDR_REG)
li $t4, N64_CART_DOM1_ADDR2 
addu $t3, $t4 // Load at boot segment
sw $t3, 0($t1)

li $t1, N64_KSEG1_ADDR(N64_PI_WR_LEN_REG)
sw $t2, 0($t1)

// Initialize RSP
li $t0, N64_KSEG1_ADDR(N64_SP_PC_REG)
sw $zero, 0($t0)

li $t0, N64_KSEG1_ADDR(N64_SP_STATUS_REG)
li $t1, 0x00aaaaae 
sw $t1, 0($t0)

// Restore registers
li $t0, 0x80000300
sw $s4, 0x00($t0)
sw $s3, 0x04($t0)
sw $s5, 0x0c($t0)
sw $s7, 0x14($t0)

// Copy second stage to RDRAM at 0x400

// The well-regarded GNU toolchain appears to be unable to process the most simple of constants, so I have to do this in two steps.
li $t0, N64_KSEG1_ADDR(N64_SP_DMEM)
ori $t0, (Stage2Start) // Source
li $t1, N64_KSEG0_ADDR(0x400) // Destination
li $t2, N64_KSEG1_ADDR(N64_SP_DMEM)
ori $t2, (Stage2End) // End

.LoadStage2Word:
lw $t3, 0($t0) // From source
sw $t3, 0($t1) // To destination
addiu $t0, 0x04 // Increment locations
addiu $t1, 0x04
bne $t0, $t2, .LoadStage2Word // If not yet at the end, copy another word

li $t0, N64_KSEG0_ADDR(0x400)
jr $t0

Stage1End:

Stage2Start:

// Clear RSP DMEM and IMEM
li $t0, N64_KSEG1_ADDR(N64_SP_DMEM) // DMEM
li $t1, N64_KSEG1_ADDR(N64_SP_IMEM) // IMEM
li $t2, 0 // Counter
li $t3, 0x400 // Word limit

.ClearSPMEM:
sw $zero, 0($t0)
sw $zero, 0($t1)
addiu $t0, 4
addiu $t1, 4
addiu $t2, 1
bne $t2, $t3, .ClearSPMEM

// Unmask RCP interrupts
li $t1, N64_KSEG1_ADDR(N64_MI_INTR_MASK_REG)
ori $t0, $zero, (N64_MI_INTR_MASK_REG_CLEAR_SP_MASK | N64_MI_INTR_MASK_REG_CLEAR_SI_MASK | N64_MI_INTR_MASK_REG_CLEAR_AI_MASK | N64_MI_INTR_MASK_REG_CLEAR_VI_MASK | N64_MI_INTR_MASK_REG_CLEAR_PI_MASK | N64_MI_INTR_MASK_REG_CLEAR_DP_MASK) 
sw $t0, 0($t1)

// Clear each RCP interrupt cause bit
li $t0, N64_KSEG1_ADDR(N64_AI_STATUS_REG)
sw $zero, 0($t0)

li $t0, N64_KSEG1_ADDR(N64_SI_STATUS_REG)
sw $zero, 0($t0)

li $t0, N64_KSEG1_ADDR(N64_PI_STATUS_REG)
ori $t1, $zero, 0x02
sw $t1, 0($t0)

li $t0, N64_KSEG1_ADDR(N64_MI_INIT_MODE_REG)
ori $t1, $zero, 0x800
sw $t1, 0($t0)

// Jump to boot segment
li $t0, N64_KSEG0_ADDR(N64_CART_DOM1_ADDR2)
lw $t0, 8($t0) // Offset
jr $t0

Stage2End:

.org 0x1000
