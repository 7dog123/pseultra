/*
 * pseultra/n64/boot/ucode/psm3d.sx
 * PSM3D microcode - Pseultra Microcode 3D
 * 
 * (C) pseudophpt 2018
 */

/*
 * NOTES ON THE STATUS WORD
 *
 * The PSM3D microcode, and any other microcodes for use with the pseultra lib-
 * rary, assume the last word of DMEM, 0xFFC, to be zero-initialized on first
 * run, and is used as a status word. In this microcode, the byte at 0xFFC is
 * used to specify whether the XBUS buffer has been initialized or not, so
 * that more tasks can be run while the RDP output produced by previous tasks
 * are processed by the RDP
 */

// TODO: add notes on stack

// N64 Definitions
#include <n64.sx>
#include <mips.sx>
#include <ucode.sx>

#define PSM3D_XBUS_BUFFER_SIZE 0x400

#define PSM3D_STATUS_WORD 0xFFC // Location of the status word in SP DMEM
#define PSM3D_STATUS_XBUS_INIT_BYTE (PSM3D_STATUS_WORD + 0) // Has the XBUS buffer been initialized?

.global uPSM3DStart
.global uPSM3DEnd

//
// Beginning of task execution
//
// At this point, the microcode assumes the header is stored in DMEM
//
.align 3 // Align to 64-bit boundaries

uPSM3DStart:

//
// Test if the XBUS buffer has been initialized 
//

#define xbus_initialized $t0

.XBUSTestInit:
    lb xbus_initialized, PSM3D_STATUS_XBUS_INIT_BYTE($zero)
    bnez xbus_initialized, .BeginExecution

//
// Initialize the XBUS buffer
//

.XBUSInit:

#define set_xbus_dmem_dma $t0

    ori set_xbus_dmem_dma, $zero, 0x2 // Use XBUS as a command buffer 
    mtc0 set_xbus_dmem_dma, CMD_STATUS

#undef set_xbus_dmem_dma

#define xbus_buffer_start $t0

    ori xbus_buffer_start, $zero, xbus_buffer // Initialize command buffer positions
    mtc0 xbus_buffer_start, CMD_START // CMD_START is written to first, since CMD_END begins actual processing
    mtc0 xbus_buffer_start, CMD_END

#undef xbus_buffer_start

#undef xbus_initialized

//
// Begin execution
//

#define dl_dram_ptr $s0

.BeginExecution:
    lw dl_dram_ptr, header($zero) // Initialize pointer to the current DRAM location

//
// Main execution loop
//

// TODO: Load more than 1 command at a time

.ExecutionLoop:
    move $a0, dl_dram_ptr // Load display list command
    ori $a1, $zero, cmd
    ori $a2, $zero, 8

    jal DMARead // DMA command

// TODO: Separate into a different function and check for end wraparound

#define xbus_pos $t0
#define command $t1

    mfc0 xbus_pos, CMD_END // Simple pipe
    lw command, cmd($zero)
    sw command, 0(xbus_pos)
    lw command, (cmd + 4)($zero)
    sw command, 4(xbus_pos)
    addiu xbus_pos, 0x8
    mtc0 xbus_pos, CMD_END

    addiu dl_dram_ptr, 0x8 // Advance DL pointer

    bnez command, .ExecutionLoop

#undef command
#undef xbus_pos

#undef dl_dram_ptr

//
// Finish execution with a break instruction
//

.FinishExecution:
    break

#include "dma.sx"

.align 3

uPSM3DEnd:

//
// Data section
//

// 0x10 bytes of header written to by the task executor
.lcomm header, 0x10
// XBUS buffer
.lcomm xbus_buffer, PSM3D_XBUS_BUFFER_SIZE
// Current display list command
.lcomm cmd, 0x8
