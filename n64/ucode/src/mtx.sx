/*
 * pseultra/n64/ucode/src/mtx.sx
 * PSM3D microcode Matrix operations
 * 
 * (C) pseudophpt 2018
 */

//
// Matrix multiply 4x4 AB -> C
// 
// a0 = DMEM addr of matrix C
// a1 = DMEM addr of matrix A
// a2 = DMEM addr of matrix B
//
// THIS ROUTINE TAKES IN B AS A TRANSPOSED MATRIX
//
MTXMult4x4:

    ori r28, $zero, 4 // Row count + 1

.MTXMult4x4Row:

        ldv vc8, 0, 0, r25 // Load the current row of matrix A twice for 2 calculations at a time
        ldv vc8, 8, 0, r25
        
        ldv vc9, 0, 32, r25 // Load the fractional part
        ldv vc9, 8, 32, r25

    ori r29, $zero, 2 // Column halves left
    move r27, r26 // Matrix B current column half pointer

.MTXMult4x4ColHalf:
    
    addiu r29, -1

        lqv vc10, 0, 0, r27 // Load first and second columns and their fractional parts
        lqv vc11, 0, 32, r27

    addiu r27, 16 // Move to next column half
    
        vmudl vc12, vc9, vc11, f // Multiply double precision
        vmadm vc12, vc8, vc11, f
        vmadn vc13, vc9, vc10, f
        vmadh vc12, vc8, vc10, f

        vaddc vc13, vc13, vc13, q1 // Accumulate results
        vadd vc12, vc12, vc12, q1
        
        vaddc vc13, vc13, vc13, h2
        vadd vc12, vc12, vc12, h2

        ssv vc12, 0, 0, r24 // Store results
        ssv vc12, 8, 2, r24 
        ssv vc13, 0, 32, r24 
        ssv vc13, 8, 34, r24 

    bnez r29, .MTXMult4x4ColHalf
    addiu r24, 4 // Increment C matrix pointer

    addiu r28, -1 // Decrement row count

    bnez r28, .MTXMult4x4Row
    addiu r25, 8 // Go to next row

    jr $ra
    nop

//
// Matrix multiply 4x4 Av -> w
// 
// a0 = DMEM addr of matrix A
// vc8 = Vector v integer part, repeated twice
// vc9 = Vector v fractional part, repeated twice
//
// Returns 
//
// vc14 = Vector w integer part, elements 0-4 repeated twice
// vc15 = Vector w fractional part, elements 0-4 repeated twice
//
MTXApply4x4:

    ori r28, $zero, 2 // Halves left

.MTXApply4x4Half:

        lqv vc10, 0, 0, r24 // Load first half, int and fractional parts
        lqv vc11, 0, 32, r24

        vmudl vc12, vc9, vc11, f // Multiply double precision
        vmadm vc12, vc8, vc11, f
        vmadn vc13, vc9, vc10, f
        vmadh vc12, vc8, vc10, f

    addiu r28, -1 // Decrement "halves left"

        vaddc vc13, vc13, vc13, q1 // Accumulate results
        vadd vc12, vc12, vc12, q1

        vaddc vc13, vc13, vc13, h2
        vadd vc12, vc12, vc12, h2

    beq r28, $zero, .MTXApply4x4StoreResult // Store result if we're done here
    nop

    addiu r24, 0x10 // Go to next half of the matrix

        vmov vc14, 0, vc12, e0 // Store results from first half
        vmov vc14, 1, vc12, e4
        
        vmov vc15, 0, vc13, e0
    b .MTXApply4x4Half
        vmov vc15, 1, vc13, e4

.MTXApply4x4StoreResult:
        vmov vc14, 2, vc12, e0 // Store results from first half
        vmov vc14, 3, vc12, e4
        
        vmov vc15, 2, vc13, e0
        vmov vc15, 3, vc13, e4

    jr $ra
    nop

// Subroutine to calculate cross product v x w and optionally divide by z 
// vc8 = Vector v integer part
// vc9 = Vector v fractional part
// vc10 = Vector w integer part
// vc11 = Vector w fractional part
// r24 = non-0 for Divide by -z 
//
// Returns cross product in vc12/vc13
// Leaves vc8-vc11 untouched

CrossProduct:
        vor vc13, nullconst, nullconst, f
        vor vc15, nullconst, nullconst, f

        vmov vc12, 0, vc8, e1 // Load cross product coefficients
        vmov vc13, 0, vc9, e1 
        vmov vc12, 1, vc8, e2
        vmov vc13, 1, vc9, e2
        vmov vc12, 2, vc8, e2
        vmov vc13, 2, vc9, e2
        vmov vc12, 3, vc8, e0
        vmov vc13, 3, vc9, e0
        vmov vc12, 4, vc8, e0
        vmov vc13, 4, vc9, e0
        vmov vc12, 5, vc8, e1
        vmov vc13, 5, vc9, e1

        vmov vc14, 0, vc10, e2
        vmov vc15, 0, vc11, e2
        vmov vc14, 1, vc10, e1
        vmov vc15, 1, vc11, e1
        vmov vc14, 2, vc10, e0
        vmov vc15, 2, vc11, e0
        vmov vc14, 3, vc10, e2
        vmov vc15, 3, vc11, e2
        vmov vc14, 4, vc10, e1
        vmov vc15, 4, vc11, e1
        vmov vc14, 5, vc10, e0
        vmov vc15, 5, vc11, e0

        vmudl nullconst, vc13, vc15, f // Calculate cross product v1 x v2 
        vmadm nullconst, vc12, vc15, f // In order to stay restricted 
        vmadn vc13, vc13, vc14, f
        vmadh vc12, vc12, vc14, f

        vxor nullconst, nullconst, nullconst, f // Zero nullconst

        vsubc vc13, vc13, vc13, q0 // Store cross product in vc27/vc26
        vsub vc12, vc12, vc12, q0

    beq r24, r0, .CrossProductDone
    nop

        vrcph vc14, 5, vc12, 5 // Calculate 1/c
        vrcpl vc15, 5, vc13, 5
        vrcph vc14, 5, nullconst, f

        vmudn vc15, vc15, v2nconst, v2n_2 // Shift left 1 for correct point position 
        vmadh vc14, vc14, v2nconst, v2n_2        
        vmadn vc15, nullconst, nullconst, f 

        vmudl nullconst, vc13, vc15, e5 // Calculate a/c, b/c. Again overwrite nullconst
        vmadm nullconst, vc12, vc15, e5
        vmadn vc15, vc13, vc14, e5
        vmadh vc14, vc12, vc14, e5
        
        vxor nullconst, nullconst, nullconst, f // Zero nullconst

        vsubc vc13, nullconst, vc15, f // Calculate -a/c, -b/c 
        vsub vc12, nullconst, vc14, f

.CrossProductDone:

    jr $ra
    nop
