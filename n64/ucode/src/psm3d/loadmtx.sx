/*
 * pseultra/n64/ucode/src/psm3d/loadmtx.sx
 * PSM3D microcode LoadMtx functions
 * 
 * (C) pseudophpt 2018
 */

//////////////////////////////////////////////////////////////////////////////
//                                                                          // 
// LoadMtx                                                                  // 
//                                                                          // 
// Loads a matrix into a matrix stack                                       // 
//                                                                          // 
////////////////////////////////////////////////////////////////////////////// 
//                                                                          // 
// FORMAT:                                                                  // 
//                                                                          // 
// 06 -- -T -S -- DD DD DD                                                  // 
//                                                                          // 
// T: Push type                                                             // 
//     0: Multiply                                                          // 
//     1: Load                                                              // 
// S: Stack to push to                                                      // 
//     0: Projection                                                        // 
//     1: Modeling                                                          // 
// D: DRAM address of matrix                                                // 
//                                                                          // 
//////////////////////////////////////////////////////////////////////////////


.global OPLoadMtx

OPLoadMtx:

    lb r18, (%lo(cmd) + 3)($zero) // Get stack to push to
    bnez r18, .MtxModel // Branch to model matrix actions if that's where we're pushing
    lb r19, (%lo(cmd) + 2)($zero) // Get push type

.MtxProj:
    ori r20, $zero, %lo(mtx_proj) // Projection matrix pointer as destination

    b .MtxAction // Go to matrix's action
    move r21, r20 // Projection matrix pointer as source

.MtxModel:
    move r20, mtx_stack_ptr // Matrix stack pointer as destination
    addu mtx_stack_ptr, PSM3D_MTX_SIZE // Make stack space

    addiu r21, r20, -PSM3D_MTX_SIZE // Matrix below as source

.MtxAction:
    bnez r19, .MtxLoad // Branch to push type
    lw r24, (%lo(cmd) + 4)($zero) // Get matrix DRAM address

.MtxMultiply:
    ori r25, $zero, %lo(cmd) // Load into temp memory low
    jal DMARead
    ori r26, $zero, PSM3D_MTX_SIZE - 1 // DMA matrix

    ori r24, $zero, %lo(cmd) + 0x40 // Result stored
    move r25, r21 // A matrix as source
    jal MTXMult4x4
    ori r26, $zero, %lo(cmd) // B matrix as passed

    ori r16, $zero, 4 // Matrix parts left
    ori r17, $zero, %lo(cmd) + 0x40 // Source

.MtxCopy:
        
        lqv vc16, 0, 0, r17 // Read from source

    addiu r16, -1 // One less matrix qword
    addiu r17, 0x10 // Increment source

        sqv vc16, 0, 0, r20

    bnez r16, .MtxCopy // Branch back if not done copying
    addiu r20, 0x10 // Increment destination
        
    op_ret
    nop

.MtxLoad:
    move r25, r20 // DMA directly into destination
    jal DMARead
    ori r26, $zero, PSM3D_MTX_SIZE - 1 // DMA matrix

    op_ret // Return
    nop
