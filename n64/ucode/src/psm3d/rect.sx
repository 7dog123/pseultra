/*
 * pseultra/n64/boot/ucode/rect.sx
 * PSM3D microcode Rect functions
 * 
 * (C) pseudophpt 2018
 */

//////////////////////////////////////////////////////////////////////////////
//                                                                          // 
// Rect                                                                     // 
//                                                                          // 
// Draws a rectangle primitive                                              // 
//                                                                          // 
//// IF TEXTURING ENABLED //////////////////////////////////////////////////// 
//                                                                          // 
// FORMAT:                                                                  // 
//                                                                          // 
// 04 XX XY YY 0T AA AB BB SS SS TT TT UU UU VV VV                          //
//                                                                          //
// X: Bottom right X (10.2)                                                 //
// Y: Bottom right Y (10.2)                                                 // 
// T: Tile number                                                           // 
// A: Top left X (10.2)                                                     // 
// B: Top left Y (10.2)                                                     // 
//                                                                          // 
// S: S coordinate of top left                                              // 
// T: T coordinate of top left                                              // 
//                                                                          // 
// U: S coordinate of bottom right                                          // 
// V: T coordinate of bottom right                                          // 
//                                                                          // 
// D: Values of bits in high word to set                                    // 
//                                                                          // 
//// IF TEXTURING DISABLED /////////////////////////////////////////////////// 
//                                                                          // 
// FORMAT:                                                                  // 
//                                                                          // 
// 04 XX XY YY -- AA AB BB                                                  // 
//                                                                          // 
// X: Bottom right X (10.2)                                                 // 
// Y: Bottom right Y (10.2)                                                 // 
// A: Top left X (10.2)                                                     // 
// B: Top left Y (10.2)                                                     // 
//                                                                          // 
//////////////////////////////////////////////////////////////////////////////

.global OPRect

OPRect:

#define tx_status $t0

    lb tx_status, PSM3D_STATUS_TX_BYTE($zero)
    bltz tx_status, .TextureRect // Branch to TextureRect if the texture enable bit is set

#undef tx_status

// Draw rectangle by filling

.FillRect:

#define fill_rect_cmd $t0
    
    ori fill_rect_cmd, $zero, UCODE_RDP_OPC_Fill_Rectangle
    sb fill_rect_cmd, %lo(cmd)($zero)

#undef fill_rect_cmd

#define cmd_ptr $a0
#define cmd_len $a1

    ori cmd_ptr, $zero, %lo(cmd)
    jal XBUSPush
    ori cmd_len, $zero, 8

#undef cmd_len
#undef cmd_ptr

    op_ret
    nop


// Draw rectangle by texturing

.TextureRect:
// UNIMPLEMENTED
/*
#define text_rect_cmd $t0
    
    ori text_rect_cmd, $zero, UCODE_RDP_OPC_Texture_Rectangle // Write texture rectangle command
    sb text_rect_cmd, %lo(cmd)($zero)

#undef text_rect_cmd

// DMA second part of command  

    move $a0, dl_dram_ptr
    ori $a1, $zero, %lo(cmd) + 8
    jal DMARead
    ori $a2, $zero, 7

#define delta vc16

// Load delta

#define low vc17
#define high vc18

    llv low, 0, cmd + 8, $zero
    llv high, 0, cmd + 12, $zero
    vsubc delta, high, low, f

#undef high 
#undef low

#define delta_int vc17
#define delta_frac vc18

// Split delta into integer and fractional parts

    vmudm delta_int, delta, v2nconst2, v2n2_2048
    vmadn delta_frac, nullconst, nullconst, f

#undef delta

#define low vc19
#define high vc20

// Split x and y coordinates into separate bytes

    lw $t0, (%lo(cmd))($zero) // Get the first word and shift left by 4 so X and Y are in separate vector elements
    sll $t0, $t0, 4

    sw $t0, (%lo(cmd) + 12)($zero) // Store in the last word of the command, which will be overwritten soon

    llv high, 0, cmd + 12, $zero // Load shifted high coordinates
    
    lw $t0, (%lo(cmd) + 4)($zero) // Get the second word and shift left by 4 so A and B are in separate vector elements
    sll $t0, $t0, 4

    sw $t0, (%lo(cmd) + 12)($zero) // Store in the last word of the command, which will be overwritten soon

    llv low, 0, cmd + 12, $zero // Load shifted low coordinates
   
// Mask out and calculate delta

#define deltaxy vc21 

#define mask vc21

    vor mask, nullconst, v2nconst, v2n_1 // Shift X / A left 4, Y / B left 0
    vmov mask, 0, v2nconst, v2n_16
    
    vmudn low, mask, low, f
    vmudn high, mask, high, f

#undef mask
    
    vsubc deltaxy, high, low, f // Calculate delta

#undef high
#undef low

// Reciprocate

// Push to xbus

    ori $a0, $zero, %lo(cmd)
    jal XBUSPush
    ori $a1, $zero, 16

*/

    op_ret
    nop
