/*
 * pseultra/n64/ucode/src/psm3d/tri.sx
 * PSM3D microcode Tri functions
 * 
 * (C) pseudophpt 2018
 */

//////////////////////////////////////////////////////////////////////////////
//                                                                          // 
// Tri                                                                      // 
//                                                                          // 
// Draws a triangle primitive                                               // 
//                                                                          // 
// FORMAT:                                                                  // 
//                                                                          // 
// 07 XX YY ZZ -- -- -- --                                                  // 
//                                                                          // 
// X: First vertex index                                                    // 
// Y: Second vertex index                                                   // 
// Z: Third vertex index                                                    // 
//                                                                          // 
//////////////////////////////////////////////////////////////////////////////


.global OPTri

// There has to be a way to improve this, it's so fucking long.
// Maybe improve sorting code, then perform the calculation cyclically?

OPTri:
    lb $t0, (%lo(cmd) + 1)($zero) // Get vertex cache offset
    sll $t0, $t0, 4 
        
        ldv vc16, 0, vtx_cache, $t0 // Load integral and fractional parts of vtx 1

    lh $t1, (%lo(vtx_cache) + 2)($t0) // Load y coordinate integer 1
    sll $t1, $t1, 16 
    lh $t4, (%lo(vtx_cache) + 10)($t0) // Load y coordinate fraction 1
        
        ldv vc17, 0, vtx_cache + 8, $t0

    andi $t4, 0xffff
    addu $t1, $t1, $t4 // Combine integer and fraction
    lb $t0, (%lo(cmd) + 2)($zero) // Get vertex cache offset
    sll $t0, $t0, 4 
        
        ldv vc18, 0, vtx_cache, $t0 // Load integral and fractional parts of vtx 2
    
    lh $t2, (%lo(vtx_cache) + 2)($t0) // Load y coordinate integer 2
    sll $t2, $t2, 16 
    lh $t4, (%lo(vtx_cache) + 10)($t0) // Load y coordinate fraction 2
   
        ldv vc19, 0, vtx_cache + 8, $t0

    andi $t4, 0xffff
    addu $t2, $t2, $t4 // Combine integer and fraction
    lb $t0, (%lo(cmd) + 3)($zero) // Get vertex cache offset
    sll $t0, $t0, 4 
        
        ldv vc20, 0, vtx_cache, $t0 // Load integral and fractional parts of vtx 3

    lh $t3, (%lo(vtx_cache) + 2)($t0) // Load y coordinate integer 3
    sll $t3, $t3, 16 
    lh $t4, (%lo(vtx_cache) + 10)($t0) // Load y coordinate fraction 3
    
        ldv vc21, 0, vtx_cache + 8, $t0

    andi $t4, 0xffff
    addu $t3, $t3, $t4 // Combine integer and fraction
    
        vnop 0, 0, 0, 0

    bge $t3, $t1, .NoSwapXZ // if (x > z) swap(x, z)
    nop

        vor vc22, nullconst, vc16, f // Swap X and Z
        vor vc23, nullconst, vc17, f 
    
    or $t4, $zero, $t1 // disgosten

        vor vc16, nullconst, vc20, f 
        vor vc17, nullconst, vc21, f 
        
    or $t1, $zero, $t3
    
        vor vc20, nullconst, vc22, f 
        vor vc21, nullconst, vc23, f 

    or $t3, $zero, $t4

.NoSwapXZ:

    bge $t2, $t1, .NoSwapXY // if (x > y) swap(x, y)
    nop
    
        vor vc22, nullconst, vc16, f // Swap X and Y
        vor vc23, nullconst, vc17, f 

    or $t4, $zero, $t1

        vor vc16, nullconst, vc18, f 
        vor vc17, nullconst, vc19, f 
        
    or $t1, $zero, $t2
    
        vor vc18, nullconst, vc22, f 
        vor vc19, nullconst, vc23, f 

    or $t2, $zero, $t4

.NoSwapXY:
    
    bge $t3, $t2, .NoSwapYZ // if (y > z) swap(y, z)
    nop
    
        vor vc22, nullconst, vc20, f // Swap Y and Z
        vor vc23, nullconst, vc21, f 

    or $t4, $zero, $t2

        vor vc20, nullconst, vc18, f 
        vor vc21, nullconst, vc19, f 
        
    or $t2, $zero, $t3

        vor vc18, nullconst, vc22, f 
        vor vc19, nullconst, vc23, f 

    or $t3, $zero, $t4

.NoSwapYZ:
    
    ori $t0, $zero, 0x08 // Store triangle command
    sb $t0, (%lo(cmd))($zero)

        ssv vc18, 0, cmd + 0x8, $zero // Store XL, int
        ssv vc19, 0, cmd + 0xa, $zero // Store XL, frac
        
        ssv vc16, 0, cmd + 0x10, $zero // Store XH, int
        ssv vc17, 0, cmd + 0x12, $zero // Store XH, frac
        
        ssv vc16, 0, cmd + 0x18, $zero // Store XM, int
        ssv vc17, 0, cmd + 0x1a, $zero // Store XM, frac

        vsubc vc23, vc21, vc19, f // Calculate v3 - v2
        vsub vc22, vc20, vc18, f
        
    jal CalcTriDxDy // Calculate DxLDy
    nop

        ssv vc26, 0, cmd + 0xc, $zero // Store int
        ssv vc27, 0, cmd + 0xe, $zero // Store frac

        vsubc vc23, vc21, vc17, f // Calculate v3 - v1
        vsub vc22, vc20, vc16, f

    jal CalcTriDxDy // Calculate DxHDy
    nop

        ssv vc26, 0, cmd + 0x14, $zero // Store int
        ssv vc27, 0, cmd + 0x16, $zero // Store frac

        vsubc vc23, vc19, vc17, f // Calculate v2 - v1
        vsub vc22, vc18, vc16, f
        
    jal CalcTriDxDy // Calculate DxMDy
    nop

        ssv vc26, 0, cmd + 0x1c, $zero // Store int
        ssv vc27, 0, cmd + 0x1e, $zero // Store frac

        vmov vc26, 0, vc16, e1 // Load Y coordinates into one vector
        vmov vc26, 1, vc18, e1 
        vmov vc26, 2, vc20, e1 

        vmov vc27, 0, vc17, e1 
        vmov vc27, 1, vc19, e1 
        vmov vc27, 2, vc21, e1 

        vmudn vc27, vc27, v2nconst, v2n_4 // Shift left 2 into s11.2 form
        vmadh vc26, vc26, v2nconst, v2n_4

        vadd vc27, nullconst, v2nconst2, v2n2_16384 // vc27 = 0x3FFF
        vsub vc27, vc27, v2nconst, v2n_1

        vand vc26, vc26, vc27, f // Mask y coords

        ssv vc26, 0, cmd + 0x6, $zero // Store y coords
        ssv vc26, 2, cmd + 0x4, $zero
        ssv vc26, 4, cmd + 0x2, $zero

    
    lw $t1, (%lo(cmd) + 0x14)($zero) // Load DxHDy
    lw $t2, (%lo(cmd) + 0x1c)($zero) // Load DxMDy

    bge $t1, $t2, .LeftMajor 
    ori $t0, $zero, 0

.RightMajor:
    ori $t0, $zero, 0x80

.LeftMajor:
    sb $t0, (%lo(cmd) + 1)($zero)

        lqv vc30, 0, cmd, $zero
        lqv vc31, 0, cmd + 0x10, $zero

        vnop 0, 0, 0, 0

    ori $a0, $zero, %lo(cmd) // Push command
    jal XBUSPush
    ori $a1, $zero, 32

    op_ret // Return operation
    nop

// Little subroutine to calculate Dx/Dy
CalcTriDxDy:
        vrcph vc22, 1, vc22, 1 // Calculate 1 / dy
        vrcpl vc23, 1, vc23, 1
        vrcph vc22, 1, vc22, 1

        vmudn vc25, vc23, v2nconst, v2n_2 // Shift left 1 for correct point position 
        vmadm vc24, vc22, v2nconst, v2n_2        
        vmadn vc25, nullconst, nullconst, f 
    
        vmudl vc26, vc23, vc25, h1 // Calculate DxLDy
        vmadm vc26, vc22, vc25, h1 
        vmadn vc27, vc23, vc24, h1 
        vmadh vc26, vc22, vc24, h1 

    jr $ra
    nop
